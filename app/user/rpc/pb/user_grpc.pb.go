// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: user.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	UserFind(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*UserInfo, error)
	UserCreate(ctx context.Context, in *UserCreateReq, opts ...grpc.CallOption) (*UserIdReply, error)
	UserFindByEmail(ctx context.Context, in *UserFindByEmailReq, opts ...grpc.CallOption) (*UserInfo, error)
	UserFindByPhone(ctx context.Context, in *UserFindByPhoneReq, opts ...grpc.CallOption) (*UserInfo, error)
	UserPageList(ctx context.Context, in *UserPageListReq, opts ...grpc.CallOption) (*UserPageListReply, error)
	UserDelete(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) UserFind(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/pb.user/userFind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserCreate(ctx context.Context, in *UserCreateReq, opts ...grpc.CallOption) (*UserIdReply, error) {
	out := new(UserIdReply)
	err := c.cc.Invoke(ctx, "/pb.user/userCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserFindByEmail(ctx context.Context, in *UserFindByEmailReq, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/pb.user/userFindByEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserFindByPhone(ctx context.Context, in *UserFindByPhoneReq, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/pb.user/userFindByPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserPageList(ctx context.Context, in *UserPageListReq, opts ...grpc.CallOption) (*UserPageListReply, error) {
	out := new(UserPageListReply)
	err := c.cc.Invoke(ctx, "/pb.user/userPageList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserDelete(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/pb.user/userDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	UserFind(context.Context, *IdReq) (*UserInfo, error)
	UserCreate(context.Context, *UserCreateReq) (*UserIdReply, error)
	UserFindByEmail(context.Context, *UserFindByEmailReq) (*UserInfo, error)
	UserFindByPhone(context.Context, *UserFindByPhoneReq) (*UserInfo, error)
	UserPageList(context.Context, *UserPageListReq) (*UserPageListReply, error)
	UserDelete(context.Context, *IdReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) UserFind(context.Context, *IdReq) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserFind not implemented")
}
func (UnimplementedUserServer) UserCreate(context.Context, *UserCreateReq) (*UserIdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCreate not implemented")
}
func (UnimplementedUserServer) UserFindByEmail(context.Context, *UserFindByEmailReq) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserFindByEmail not implemented")
}
func (UnimplementedUserServer) UserFindByPhone(context.Context, *UserFindByPhoneReq) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserFindByPhone not implemented")
}
func (UnimplementedUserServer) UserPageList(context.Context, *UserPageListReq) (*UserPageListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserPageList not implemented")
}
func (UnimplementedUserServer) UserDelete(context.Context, *IdReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDelete not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_UserFind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserFind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.user/userFind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserFind(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.user/userCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserCreate(ctx, req.(*UserCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserFindByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFindByEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserFindByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.user/userFindByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserFindByEmail(ctx, req.(*UserFindByEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserFindByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFindByPhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserFindByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.user/userFindByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserFindByPhone(ctx, req.(*UserFindByPhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserPageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPageListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserPageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.user/userPageList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserPageList(ctx, req.(*UserPageListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.user/userDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserDelete(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.user",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "userFind",
			Handler:    _User_UserFind_Handler,
		},
		{
			MethodName: "userCreate",
			Handler:    _User_UserCreate_Handler,
		},
		{
			MethodName: "userFindByEmail",
			Handler:    _User_UserFindByEmail_Handler,
		},
		{
			MethodName: "userFindByPhone",
			Handler:    _User_UserFindByPhone_Handler,
		},
		{
			MethodName: "userPageList",
			Handler:    _User_UserPageList_Handler,
		},
		{
			MethodName: "userDelete",
			Handler:    _User_UserDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
